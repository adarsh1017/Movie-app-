
import React, { useState, useRef } from 'react';

function MoviesList() {
  const [movies, setMovies] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [errorMessage, setErrorMessage] = useState(null);
  const isRetryingRef = useRef(false); // useRef to store reference to isRetrying state

  const fetchMoviesHandler = async () => {
    setIsLoading(true);
    setErrorMessage(null);
    isRetryingRef.current = false; // Set isRetrying to false before starting a new fetch

    try {
      const response = await fetch('https://swapi.dev/api/films');
      if (!response.ok) {
        throw new Error('Failed to fetch movies');
      }
      const data = await response.json();
      setMovies(data.results);
    } catch (error) {
      console.error('Error fetching movies:', error);
      setErrorMessage('Something went wrong ....Retrying');

      // Set isRetryingRef to true when starting to retry
      isRetryingRef.current = true;

      // Retry calling the API after 5 seconds if isRetryingRef is still true
      setTimeout(() => {
        if (isRetryingRef.current) {
          fetchMoviesHandler();
        }
      }, 5000);
    } finally {
      setIsLoading(false);
    }
  };

  const cancelRetryHandler = () => {
    isRetryingRef.current = false; // Set isRetryingRef to false when canceling retrying
  };

  return (
    <div>
      <button onClick={fetchMoviesHandler} disabled={isLoading}>
        {isLoading ? 'Loading...' : 'Fetch Movies'}
      </button>
      {errorMessage && <p>{errorMessage}</p>}
      {isRetryingRef.current && <button onClick={cancelRetryHandler}>Cancel Retry</button>}
      {isLoading && <p>Loading...</p>}
      <ul>
        {movies.map(movie => (
          <li key={movie.episode_id}>
            <h2>{movie.title}</h2>
            <p>{movie.opening_crawl}</p>
          </li>
        ))}
      </ul>
    </div>
  );
}

export default MoviesList;
